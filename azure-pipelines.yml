trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.x'

stages:
- stage: 'CI'
  displayName: 'CI'
  jobs:
  - job: 'Build'
    displayName: 'Build'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: $(dotnetSdkVersion)
      displayName: Use .Net Core $(dotnetSdkVersion) version

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
      displayName: dotnet restore

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
      displayName: dotnet build

    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/*.csproj'
        publishTestResults: false
      displayName: dotnet test

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/*.csproj'
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      displayName: dotnet publish

    - bash: |
        echo "$(Build.ArtifactStagingDirectory)"
        ls -lha $(Build.ArtifactStagingDirectory)
      displayName: Check artifacts  

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: '$(Build.BuildId)'
        publishLocation: 'pipeline'
      displayName: Publish pipeline artifacts

- stage: 'cd_dev'
  displayName: 'CD [Dev]'
  dependsOn: CI
  jobs:
  - deployment: Deploy
    environment: dev
    strategy: 
      runOnce:
        deploy:
          steps:

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'ado_samples'
              appType: 'webAppLinux'
              appName: 'demorod1dev'
              package: '$(Pipeline.Workspace)/**/*.zip'
              runtimeStack: 'DOTNETCORE|3.1'
              startUpCommand: 'dotnet dotnetweb.dll'
